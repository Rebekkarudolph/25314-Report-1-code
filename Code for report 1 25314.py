# -*- coding: utf-8 -*-
"""
Created on Tue Feb 21 09:36:58 2023

@author: rebek
"""


import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt

# Input 

class params:
    pass

#P=np.zeros(100)
#P[0]=1


P=np.zeros(100)
P[0]=1

N=np.ones(100)*30



params.dz = 1 # m
params.kp = 0.05  #m^2/mmol N 
params.kw = 0.2 #1/m
params.I_0 = 350 #(mol photons m2/s)

params.d=100
params.z=np.arange(0.5*params.dz,1+params.d-0.5*params.dz,params.dz)

params.n= 100
params.u=3 # vertical velocity 1/day 
params.D = 5 # 5*60*60*24/(100**2) # m^2/d

params.gmax= 1.5 #1/day growth
params.H_I = 20 #(mol photons m2/s)
params.l= 0.01*24 #1/days loss rate

params.H_N=0.3 #mmol nutrient/m3

#params.alfa=10**(-9) # mmol nutrient/cell
params.e = 0.5 # dimensionless Nutrient recycling coefficient
params.phi = 75 # Lattitude, Equator = 0, Greenland sea  =75


#sinking of phytoplankton = 3 m/day 

params.N_b = 30 #mmol N /day

params.graz=1.5 #m3/mmol N/day

time = [0,365*2]

######################



def light(P,params):
    ## UPS to "turn on" seasonality use I_season and add t to light and growth functions
    #I_season = params.I_0 * (1-0.8*np.sin(np.pi*params.phi/180)*np.cos(2*np.pi*t/365))
    Q = params.kp * params.dz * (np.cumsum(P) + (P/2))
    I = params.I_0 * np.exp(-params.kw * params.z - Q)
    #I = I_season * np.exp(-params.kw * params.z - Q)
    return I

#I=light(t,P,params)

######################

def growth(P,N,params):
    g = params.gmax*np.minimum(light(P,params)/(light(P,params)+params.H_I),
                               N/(N+params.H_N))#-params.l
  #  print(g)
    return g

#g=growth(t,P,N,params)

######################

def fluxP(t,P,N,params):
    Ja = np.zeros(params.n+1)
    Jd = np.zeros(params.n+1)
    J = np.zeros(params.n+1)
    dpdt=np.zeros(params.n)
    
    for i in range(params.n+1):
        if i == 0 or i == params.n:
            Ja[0] = 0
            Ja[params.n] = 0
            Jd[0] = 0
            Jd[params.n] = 0
        else:
            Ja[i] = params.u*P[i-1]
            Jd[i] = -params.D *(P[i]-P[i-1])/params.dz
        
    
        J[i] = Ja[i] + Jd[i]
        

    for i in range(params.n):    
        dpdt[i] = -(J[i+1] - J[i])/params.dz

    
    dpdt = (dpdt) + growth(P,N,params)*P-params.l*P-params.graz*P**2
    
    return dpdt

#dpdt=fluxP(t,P,N,params)

######################

def fluxN(t,P,N,params):
    J = np.zeros(params.n+1)
    dNdt = np.zeros(params.n)
    
    for i in range(params.n):
        if i == 0 or i == params.n:
            J[0] = 0
            #J[params.n] = -params.D*((N[params.n-1]-N[params.n-2])/params.dz)
            J[params.n] = -params.D*((params.N_b-N[params.n-1])/params.dz)
        else:
            J[i] = -params.D *(N[i]-N[i-1])/params.dz
           

    for i in range(params.n):    
        dNdt[i] = -(J[i+1] - J[i])/params.dz
      
  
    #dNdt = -params.alfa*growth(P,N,params)*P+params.e*params.alfa*params.l*P+(dNdt) 
    dNdt = -growth(P,N,params)*P+params.e*params.l*P+(dNdt) 
    
    
    return dNdt

#dNdt=fluxN(t,P,N,params)

######################

y=np.concatenate((P,N))

def fluxtot(t,y,params):
    P = y[0:params.n]
    N = y[params.n:2*params.n] #removed the n+1
    dydt=np.concatenate([fluxP(t,P,N,params),fluxN(t,P,N,params)])
    
    return dydt

##################### 

result=solve_ivp(fluxtot,time,y,args=(params,))



# Define functions for plotting
I=light(P,params)
fI=I/(I+params.H_I)
fN=result['y'][params.n:params.n*2,-1]/(result['y'][params.n:params.n*2,-1]+params.H_N)


#Virker float
plt.pcolor(result['t'],-params.z,result['y'][0:100,:])
plt.colorbar()
plt.title('Phytoplankton (mmol N/m3)')
plt.xlabel('Time (days)')
plt.ylabel('Depth (m)')
plt.show()

#Virker
plt.pcolor(result['t'],-params.z,result['y'][100:200,:])
plt.colorbar()
plt.title('Nutrients (mmol N/m3)')
plt.xlabel('Time (days)')
plt.ylabel('Depth (m)')
plt.show()


##### Functional respons of light
fi=light(P,params)/(light(P,params)+params.H_I)
#####


#plt.plot(fi,-params.z,label='Functional response')
plt.plot(I,-params.z,label='Light',color='orange')
plt.xlabel('Light (umol photons/m2/s)')
plt.ylabel('Depth (m)')
#plt.legend()
plt.show()




plt.plot(result['y'][0:100,-1],-params.z,label='Phytoplankton',color='green')
plt.xlabel('Phytoplankton (mmol N/m3)')
plt.ylabel('Depth (m)')
#plt.title('Phytoplankton')
#plt.legend()
plt.show()

plt.plot(result['y'][100:200,-1],-params.z,label='Nutrients',color='brown')
plt.xlabel('Nutrients (mmol N/m3)')
plt.ylabel('Depth (m)')
#plt.title('Nutrients')
#plt.legend()
plt.show()


# Functional response
plt.figure(dpi=1200)
plt.plot(fI,-params.z,'black',linestyle='--',label='I/(I+H)')
plt.plot(fN,-params.z,'black',label='N/(N+H)')
plt.xlabel('Functional response')
plt.ylabel('Depth [m]')
plt.title('Functional response')
plt.axhline(-10.5,color='black',linewidth=0.5)
plt.legend()
plt.show()

########################################


#print(result['y'][0:100,-1])


gmax10=np.array([0.01033206, 0.01554029, 0.02240051, 0.03127596, 0.04256517,
        0.05667455, 0.07395818, 0.09460263, 0.11842864, 0.14457858,
        0.17106398, 0.19415696, 0.21171526, 0.22331794, 0.22912278,
        0.22971491, 0.22593728, 0.21873736, 0.20904873, 0.19771323,
        0.18543974, 0.17279159, 0.16019294, 0.14794587, 0.13625191,
        0.12523373, 0.11495491, 0.10543638, 0.09666968, 0.08862709,
        0.08126913, 0.07454991, 0.06842098, 0.0628337 , 0.05774105,
        0.05309843, 0.04886438, 0.04500058, 0.04147217, 0.0382473 ,
        0.03529738, 0.03259639, 0.03012114, 0.02785053, 0.02576587,
        0.02385005, 0.02208804, 0.02046593, 0.01897163, 0.01759375,
        0.01632258, 0.01514872, 0.01406436, 0.01306165, 0.01213435,
        0.01127582, 0.0104811 , 0.00974447, 0.00906205, 0.00842885,
        0.00784188, 0.00729669, 0.00679108, 0.00632098, 0.00588491,
        0.00547904, 0.00510254, 0.00475172, 0.00442636, 0.00412281,
        0.00384144, 0.00357853, 0.00333507, 0.00310714, 0.0028964 ,
        0.00269862, 0.00251617, 0.0023444 , 0.00218644, 0.00203712,
        0.00190041, 0.00177049, 0.0016523 , 0.00153922, 0.0014373 ,
        0.00133903, 0.00125178, 0.00116714, 0.00109417, 0.00102378,
        0.00096758, 0.00091693, 0.00088806, 0.00087639, 0.00090868,
        0.00099533, 0.00119086, 0.0015529 , 0.00221477, 0.0033761 ])

gmax20=np.array([0.00741195, 0.01121337, 0.0163272 , 0.02310854, 0.03198169,
        0.04343375, 0.05798452, 0.07611063, 0.098091  , 0.12372949,
        0.15190904, 0.17994695, 0.20275647, 0.21927411, 0.22931085,
        0.23328429, 0.23201312, 0.22651632, 0.21785055, 0.2069981 ,
        0.19480338, 0.18194815, 0.16895316, 0.15619511, 0.14393063,
        0.13232141, 0.12145735, 0.11137627, 0.10207975, 0.09354522,
        0.08573515, 0.0786034 , 0.07209998, 0.06617392, 0.06077552,
        0.05585728, 0.05137499, 0.04728758, 0.04355774, 0.04015125,
        0.03703749, 0.03418846, 0.03157941, 0.02918758, 0.02699311,
        0.0249775 , 0.0231249 , 0.02142021, 0.01985078, 0.0184042 ,
        0.01707042, 0.0158391 , 0.01470232, 0.01365135, 0.01267998,
        0.0117807 , 0.01094879, 0.01017764, 0.00946374, 0.00880116,
        0.00818748, 0.00761719, 0.00708887, 0.00659726, 0.00614186,
        0.00571748, 0.00532451, 0.00495771, 0.00461833, 0.0043009 ,
        0.00400761, 0.00373261, 0.00347904, 0.00324052, 0.00302125,
        0.00281413, 0.00262452, 0.00244444, 0.00228055, 0.00212377,
        0.00198223, 0.00184554, 0.00172351, 0.00160421, 0.00149936,
        0.0013953 , 0.00130601, 0.0012159 , 0.00114176, 0.00106625,
        0.00100988, 0.00095466, 0.00092704, 0.00091218, 0.00094847,
        0.00103595, 0.00124223, 0.00161688, 0.00230828, 0.00351691])

gmax30=np.array([0.005519  , 0.00838807, 0.01231069, 0.01761074, 0.0246944 ,
        0.03405756, 0.04627791, 0.06197285, 0.08169035, 0.10568217,
        0.13349387, 0.16330872, 0.19102596, 0.21244868, 0.22691865,
        0.23458058, 0.23615318, 0.23268087, 0.22532042, 0.21518714,
        0.20326245, 0.19035219, 0.17708063, 0.16390587, 0.15114544,
        0.13900469, 0.12760353, 0.11699944, 0.10720604, 0.09820747,
        0.08996921, 0.08244576, 0.07558614, 0.06933754, 0.06364786,
        0.05846709, 0.05374832, 0.04944805, 0.04552647, 0.04194731,
        0.03867779, 0.03568827, 0.03295218, 0.03044554, 0.02814694,
        0.02603704, 0.02409862, 0.02231608, 0.02067554, 0.01916435,
        0.01777132, 0.01648613, 0.01529973, 0.01420364, 0.0131905 ,
        0.0122533 , 0.01138607, 0.01058294, 0.00983904, 0.00914942,
        0.00851013, 0.00791695, 0.00736669, 0.00685567, 0.00638137,
        0.00594054, 0.00553122, 0.00515049, 0.00479688, 0.00446771,
        0.00416195, 0.0038771 , 0.00361252, 0.00336581, 0.00313672,
        0.00292288, 0.00272442, 0.00253894, 0.00236696, 0.002206  ,
        0.00205694, 0.00191719, 0.00178806, 0.00166675, 0.00155508,
        0.00145004, 0.00135405, 0.00126401, 0.00118323, 0.00110889,
        0.00104601, 0.00099329, 0.00095969, 0.00094933, 0.00098164,
        0.00107763, 0.00128637, 0.00167965, 0.00239292, 0.00364884])

gmax40=np.array([0.00410441, 0.00626442, 0.00926081, 0.01337724, 0.01898288,
        0.02654929, 0.03666026, 0.05000029, 0.0672943 , 0.08914956,
        0.11572458, 0.14612947, 0.17748184, 0.20364228, 0.22261797,
        0.23417567, 0.23885267, 0.23766596, 0.23184414, 0.22262451,
        0.21112476, 0.19827926, 0.18482213, 0.17129914, 0.15809425,
        0.14546097, 0.1335526 , 0.1224488 , 0.11217706, 0.10272959,
        0.09407577, 0.0861714 , 0.07896493, 0.0724021 , 0.06642854,
        0.06099196, 0.05604281, 0.05153531, 0.04742715, 0.04368013,
        0.04025924, 0.03713337, 0.03427402, 0.03165614, 0.02925666,
        0.02705557, 0.02503413, 0.02317643, 0.02146717, 0.01989373,
        0.0184435 , 0.01710651, 0.01587223, 0.01473284, 0.01367941,
        0.0127059 , 0.01180459, 0.01097091, 0.01019803, 0.00948266,
        0.00881862, 0.00820371, 0.00763217, 0.00710283, 0.00661014,
        0.00615388, 0.00572856, 0.00533489, 0.00496724, 0.00462729,
        0.00430912, 0.00401537, 0.0037397 , 0.00348576, 0.00324664,
        0.00302707, 0.00281941, 0.00262959, 0.00244901, 0.00228498,
        0.00212775, 0.00198614, 0.00184907, 0.0017271 , 0.00160756,
        0.00150303, 0.00139911, 0.00131078, 0.00122191, 0.00115057,
        0.00107946, 0.00103124, 0.00098971, 0.00098595, 0.0010121 ,
        0.00111858, 0.00132735, 0.00174049, 0.00247292, 0.00377492])

gmax50=np.array([0.00315185, 0.00482699, 0.00717771, 0.01044958, 0.01497044,
        0.02117186, 0.029609  , 0.04096882, 0.0560448 , 0.0756357 ,
        0.10029346, 0.12980774, 0.16229943, 0.19286797, 0.21630293,
        0.23188961, 0.23989421, 0.24124266, 0.23719748, 0.22909976,
        0.21819793, 0.2055564 , 0.19202372, 0.1782388 , 0.16465718,
        0.15158479, 0.13921185, 0.12764281, 0.11692109, 0.10704834,
        0.09799902, 0.08973089, 0.08219258, 0.07532861, 0.06908291,
        0.06340088, 0.05823081, 0.05352445, 0.04923751, 0.04532949,
        0.04176377, 0.03850722, 0.03553014, 0.03280572, 0.03031011,
        0.0280217 , 0.02592137, 0.0239917 , 0.02221735, 0.02058424,
        0.01908004, 0.0176933 , 0.01641407, 0.01523296, 0.01414195,
        0.01313327, 0.01220043, 0.01133693, 0.01053755, 0.00979677,
        0.0091104 , 0.00847372, 0.00788338, 0.00733526, 0.00682676,
        0.0063542 , 0.00591563, 0.0055077 , 0.00512901, 0.00477647,
        0.0044492 , 0.00414422, 0.00386114, 0.00359708, 0.00335207,
        0.00312324, 0.00291108, 0.00271262, 0.00252884, 0.00235662,
        0.00219741, 0.00204787, 0.00191   , 0.00178019, 0.00166102,
        0.00154859, 0.00144622, 0.0013498 , 0.00126371, 0.00118404,
        0.00111708, 0.00106047, 0.00102479, 0.00101334, 0.00104798,
        0.00114994, 0.00137271, 0.00179175, 0.00255253, 0.00389178])

gmax60=np.array([0.0023993 , 0.00368664, 0.00551318, 0.0080871 , 0.01169261,
        0.01671367, 0.02366045, 0.03319232, 0.04612245, 0.06337081,
        0.08580084, 0.11382611, 0.14662393, 0.18080204, 0.20855512,
        0.22822411, 0.23971559, 0.24379764, 0.24172499, 0.23492133,
        0.22475854, 0.21243155, 0.19890748, 0.18492357, 0.17101188,
        0.157535  , 0.14472334, 0.13270864, 0.12155204, 0.11126594,
        0.10183078, 0.09320695, 0.08534365, 0.07818452, 0.07167195,
        0.06574923, 0.06036254, 0.0554613 , 0.0509992 , 0.04693355,
        0.0432261 , 0.03984178, 0.03674964, 0.03392123, 0.03133178,
        0.02895828, 0.02678102, 0.02478133, 0.02294359, 0.02125252,
        0.01969581, 0.01826081, 0.01693787, 0.01571637, 0.01458882,
        0.01354615, 0.01258265, 0.0116904 , 0.01086522, 0.0101    ,
        0.00939188, 0.00873431, 0.00812561, 0.00755955, 0.00703554,
        0.0065475 , 0.00609584, 0.00567446, 0.00528478, 0.00492046,
        0.00458399, 0.00426863, 0.00397793, 0.00370461, 0.00345337,
        0.0032162 , 0.00299905, 0.00279299, 0.00260534, 0.00242607,
        0.00226403, 0.00210785, 0.00196813, 0.00183194, 0.00171185,
        0.00159318, 0.00149081, 0.0013882 , 0.00130307, 0.00121724,
        0.00115229, 0.00108971, 0.00105742, 0.00104092, 0.0010813 ,
        0.00118135, 0.00141521, 0.0018421 , 0.0026284 , 0.00400451])

gmax70=np.array([0.00191251, 0.00294615, 0.00442497, 0.00652829, 0.00950466,
        0.01369569, 0.01956484, 0.02772723, 0.03897032, 0.05423951,
        0.07453398, 0.1006069 , 0.13229549, 0.16726322, 0.19905799,
        0.22277359, 0.23786671, 0.24487109, 0.24498077, 0.23967135,
        0.23042374, 0.2185592 , 0.20516465, 0.19107925, 0.17691577,
        0.16309739, 0.14989801, 0.13747939, 0.12592242, 0.11525189,
        0.10545534, 0.0964968 , 0.0883266 , 0.08088816, 0.07412259,
        0.06797154, 0.06237913, 0.05729287, 0.05266434, 0.0484491 ,
        0.04460699, 0.04110154, 0.03790012, 0.03497325, 0.03229473,
        0.02984081, 0.02759054, 0.02552481, 0.02362688, 0.02188131,
        0.0202747 , 0.01879449, 0.01742993, 0.01617075, 0.01500831,
        0.0139341 , 0.01294119, 0.01202246, 0.01117237, 0.01038485,
        0.00965551, 0.00897913, 0.00835227, 0.00777034, 0.0072307 ,
        0.00672926, 0.00626409, 0.00583141, 0.00542996, 0.00505617,
        0.00470936, 0.00438611, 0.00408626, 0.00380643, 0.00354701,
        0.00330456, 0.00308   , 0.00286976, 0.00267531, 0.00249286,
        0.00232447, 0.00216606, 0.00202031, 0.00188277, 0.00175684,
        0.00163768, 0.00152957, 0.00142734, 0.00133648, 0.00125195,
        0.00118135, 0.00112116, 0.00108365, 0.00107116, 0.00110792,
        0.00121521, 0.00145067, 0.00189289, 0.00269654, 0.00411091])

gmax80=np.array([0.00150642, 0.0023265 , 0.00350947, 0.0052074 , 0.00763406,
        0.01108807, 0.01598237, 0.02287849, 0.03251952, 0.0458436 ,
        0.06393598, 0.08782984, 0.1179886 , 0.15321364, 0.1887362 ,
        0.21640482, 0.23514861, 0.24519635, 0.24763111, 0.24395113,
        0.23573307, 0.22442114, 0.21122388, 0.19708627, 0.182706  ,
        0.16857061, 0.15500053, 0.14218979, 0.13024073, 0.11919168,
        0.10903811, 0.09974816, 0.09127375, 0.08355823, 0.07654165,
        0.07016401, 0.06436757, 0.05909781, 0.05430436, 0.04994091,
        0.04596554, 0.04234019, 0.03903081, 0.03600659, 0.0332402 ,
        0.03070685, 0.02838468, 0.02625379, 0.02429671, 0.02249736,
        0.0208418 , 0.01931697, 0.01791171, 0.01661531, 0.01541885,
        0.01431344, 0.01329196, 0.01234697, 0.01147278, 0.01066306,
        0.00991333, 0.00921812, 0.00857393, 0.00797597, 0.00742158,
        0.00690645, 0.00642868, 0.0059843 , 0.00557206, 0.00518823,
        0.00483218, 0.00450028, 0.0041925 , 0.00390523, 0.00363899,
        0.00339011, 0.00315969, 0.00294389, 0.00274439, 0.00255713,
        0.0023844 , 0.0022218 , 0.00207231, 0.00193114, 0.00180201,
        0.0016797 , 0.00156886, 0.0014639 , 0.00137078, 0.00128397,
        0.00121164, 0.00114979, 0.00111137, 0.00109842, 0.00113615,
        0.00124597, 0.00148737, 0.00194052, 0.00276432, 0.00421406])

gmax90=np.array([0.00120635, 0.00186736, 0.00282791, 0.00421774, 0.00622145,
        0.00910037, 0.01322146, 0.0190933 , 0.02740594, 0.03906259,
        0.05517192, 0.07692811, 0.10522921, 0.13976992, 0.17726806,
        0.20871411, 0.23111488, 0.2443179 , 0.2492353 , 0.24734925,
        0.24031153, 0.22968094, 0.21678645, 0.20268105, 0.18815085,
        0.17375126, 0.15985239, 0.14668307, 0.13436909, 0.12296378,
        0.11247175, 0.10286602, 0.09410077, 0.08611967, 0.07886215,
        0.07226676, 0.06627415, 0.06082785, 0.05587579, 0.05136971,
        0.04726624, 0.04352555, 0.04011247, 0.03699465, 0.03414397,
        0.03153427, 0.02914326, 0.02694973, 0.02493611, 0.02308508,
        0.02138285, 0.01981512, 0.01837113, 0.01703891, 0.01581018,
        0.01467469, 0.01362622, 0.01265582, 0.01175899, 0.0109277 ,
        0.01015894, 0.0094453 , 0.00878512, 0.00817132, 0.00760348,
        0.00707466, 0.0065856 , 0.0061293 , 0.00570762, 0.00531334,
        0.00494945, 0.0046083 , 0.00429409, 0.00399852, 0.0037271 ,
        0.00347071, 0.00323621, 0.0030135 , 0.00281096, 0.00261723,
        0.0024424 , 0.00227365, 0.00212295, 0.0019758 , 0.00184633,
        0.00171812, 0.0016078 , 0.00149693, 0.00140521, 0.00131244,
        0.00124249, 0.00117479, 0.00114001, 0.00112194, 0.00116538,
        0.00127279, 0.00152449, 0.00198376, 0.00283012, 0.00431142])

gmax100=np.array([0.0009935 , 0.00154075, 0.0023407 , 0.00350564, 0.00519677,
        0.00764463, 0.01117659, 0.01625265, 0.02350789, 0.033794  ,
        0.04819634, 0.06796802, 0.0942512 , 0.12733347, 0.16505093,
        0.20003087, 0.22603196, 0.24245048, 0.24996783, 0.25000939,
        0.244279  , 0.23443984, 0.22193865, 0.20793773, 0.1933144 ,
        0.17869507, 0.16450228, 0.151002  , 0.1383452 , 0.12660164,
        0.11578596, 0.10587693, 0.09683139, 0.08859388, 0.08110331,
        0.07429721, 0.06811456, 0.06249734, 0.05739155, 0.05274744,
        0.04851981, 0.04466762, 0.04115405, 0.03794587, 0.0350135 ,
        0.03233026, 0.0298725 , 0.02761881, 0.02555031, 0.0236498 ,
        0.02190218, 0.02029354, 0.0188118 , 0.0174456 , 0.01618526,
        0.01502145, 0.01394636, 0.01295227, 0.0120329 , 0.01118174,
        0.01039378, 0.00966347, 0.00898681, 0.00835903, 0.00777697,
        0.00723645, 0.00673502, 0.00626895, 0.00583644, 0.00543407,
        0.00506059, 0.00471282, 0.00439002, 0.00408914, 0.00380993,
        0.00354938, 0.00330772, 0.00308191, 0.00287266, 0.00267682,
        0.00249559, 0.00232567, 0.00216874, 0.00202134, 0.00188568,
        0.00175811, 0.00164154, 0.00153223, 0.00143414, 0.0013439 ,
        0.00126748, 0.00120343, 0.00116241, 0.00114955, 0.00118809,
        0.0013036 , 0.00155505, 0.00202935, 0.00288982, 0.0044056 ])



plt.plot(result['y'][0:100,-1],-params.z,linewidth=0.2,color='black',label='g_max = 0.04*24 ')
#plt.plot(gmax10,-params.z,linewidth=0.6,color='black',label='g_max 10%')
plt.plot(gmax20,-params.z,linewidth=0.4,color='black',label='g_max 20%')
#plt.plot(gmax30,-params.z,linewidth=0.8,color='black',label='g_max 30%')
plt.plot(gmax40,-params.z,linewidth=0.6,color='black',label='g_max 40%')
#plt.plot(gmax50,-params.z,linewidth=1,color='black',label='g_max 50%')
plt.plot(gmax60,-params.z,linewidth=0.8,color='black',label='g_max 60%')
#plt.plot(gmax70,-params.z,linewidth=1.2,color='black',label='g_max 70%')
plt.plot(gmax80,-params.z,linewidth=1,color='black',label='g_max 80%')
#plt.plot(gmax90,-params.z,linewidth=1.4,color='black',label='g_max 90%')
plt.plot(gmax100,-params.z,linewidth=1.2,color='black',label='g_max 100%')
plt.xlabel('Phytoplankton (mmol nutrient/m3)')
plt.ylabel('Depth (m)')
#plt.title('Increasing maximum growth rate by 10%')
#plt.legend()
plt.figure(figsize=(10,12))
plt.show()

